package database

import (
	"fmt"
	"log"

	"access-box/internal/shared/models"
)

// InitDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func InitDB() (*DB, error) {
	config := NewConfig()
	
	// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := CreateDatabase(config); err != nil {
		return nil, err
	}
	
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := NewConnection(config)
	if err != nil {
		return nil, err
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ GORM –∞–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–∏
	if err := InitSchema(db); err != nil {
		return nil, err
	}
	
	log.Println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	return db, nil
}

// CreateDatabase —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
func CreateDatabase(config *Config) error {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
	tempConfig := &Config{
		DBHost:     config.DBHost,
		DBPort:     config.DBPort,
		DBUser:     config.DBUser,
		DBPassword: config.DBPassword,
		DBName:     "postgres", // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
	}

	tempDB, err := NewConnection(tempConfig)
	if err != nil {
		return err
	}
	defer tempDB.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
	var count int64
	err = tempDB.Raw("SELECT COUNT(*) FROM pg_database WHERE datname = ?", config.DBName).Scan(&count).Error
	if err != nil {
		return err
	}

	if count == 0 {
		log.Printf("üìù –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '%s'...", config.DBName)
		err = tempDB.Exec("CREATE DATABASE " + config.DBName).Error
		if err != nil {
			return err
		}
		log.Printf("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", config.DBName)
	} else {
		log.Printf("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", config.DBName)
	}

	return nil
}

// RunMigrations –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func RunMigrations(db *DB) error {
	// –ü–æ–ª—É—á–∞–µ–º SQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Goose
	sqlDB, err := db.DB.DB()
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
	migrationManager := NewMigrationManager(sqlDB)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := migrationManager.RunMigrations("./migrations"); err != nil {
		return err
	}
	
	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
	return nil
}

// InitSchema –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GORM –∞–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–∏
func InitSchema(db *DB) error {
	log.Println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π
	if err := db.AutoMigrate(&models.User{}); err != nil {
		return fmt.Errorf("failed to auto-migrate User model: %w", err)
	}
	
	log.Println("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	return nil
}
